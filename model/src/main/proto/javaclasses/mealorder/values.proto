//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "io.javaclasses.mealorder";
option java_outer_classname = "ValuesProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "javaclasses/mealorder/identifiers.proto";
import "google/protobuf/timestamp.proto";
import "spine/change/value_mismatch.proto";
import "spine/change/change.proto";
import "spine/net/email_address.proto";
import "spine/time/time.proto";

// The model that represents date range.
//
message MenuDateRange {

    // Range start date.
    spine.time.LocalDate range_start = 1;

    // Range end date.
    spine.time.LocalDate range_end = 2;
}

// The model that represents phone number.
//
message PhoneNumber {

    string value = 1;
}

// The model that represents vendor name.
//
message VendorName {
    // The name of the vendor, unique for each vendor.
    string value = 1;
}

// Definition of a change in a vendor fields.
//
message VendorChange {

    // An email adress that's changing.
    spine.net.EmailAddress previous_email = 1;

    // A phone numbers that are changing.
    repeated PhoneNumber previous_phone_numbers = 2;

    // A daily deadline that's changing.
    spine.time.LocalTime previous_po_daily_deadline = 3;

    // A new e-mail adress.
    spine.net.EmailAddress new_email = 4;

    // A new phone numbers of the vendor.
    repeated PhoneNumber new_phone_numbers = 5;

    // A new daily deadline.
    spine.time.LocalTime new_po_daily_deadline = 6;
}

// DTO for the rejected add vendor command details.
//
message AddVendorRejected {

    // An unsuccessful vendor command details.
    RejectedVendorCommandDetails command_details = 1;
}

// DTO for the rejected set date range for menu command details.
//
message SetDateRangeForMenuRejected {

    // An unsuccessful vendor command details.
    RejectedVendorCommandDetails command_details = 1;

    // An identifiers of menu for which date range set was rejected.
    MenuId menu_id = 2;

    // Rejected date range.
    MenuDateRange date_range = 3;
}

// DTO for the rejected create order command details.
//
message CreateOrderRejected {

    // An unsuccessful order command details.
    RejectedOrderCommandDetails command_details = 1;
}

// DTO for the rejected add dish to order command details.
//
message AddDishToOrderRejected {

    // An unsuccessful order command details.
    RejectedOrderCommandDetails command_details = 1;

    // A mismatching vendor value.
    spine.change.ValueMismatch vendor_mismatch = 2;
}

// DTO for the rejected remove dish from order command details.
//
message RemoveDishFromOrderRejected {

    // An unsuccessful order command details.
    RejectedOrderCommandDetails command_details = 1;

    // And identifiers of a dish.
    DishId dish_id = 2;
}

// DTO for the rejected cancel order command details.
//
message CancelOrderRejected {

    // An unsuccessful order command details.
    RejectedOrderCommandDetails command_details = 1;
}

// DTO for the rejected create purchase order command details.
//
message CreatePurchaseOrderRejected {

    // An unsuccessful purchase order command details.
    RejectedPurchaseOrderCommandDetails command_details = 1;
}

// DTO for the rejected mark purchase order as delivered command details.
//
message MarkPurchaseOrderAsDeliveredRejected {

    // An unsuccessful purchase order command details.
    RejectedPurchaseOrderCommandDetails command_details = 1;
}

// DTO for the rejected cancel purchase order command details.
//
message CancelPurchaseOrderRejected {

    // An unsuccessful purchase order command details.
    RejectedPurchaseOrderCommandDetails command_details = 1;
}

// DTO for the unsuccessful vendor command details.
message RejectedVendorCommandDetails {

    // A vendor identifier.
    VendorId vendor_id = 1;

    // Date of comman creation.
    google.protobuf.Timestamp when_created = 2;
}

// DTO for the unsuccessful order command details.
message RejectedOrderCommandDetails {

    // An order identifier.
    OrderId order_id = 1;

    // Date of comman creation.
    google.protobuf.Timestamp when_created = 2;
}

// DTO for the unsuccessful purchase order command details.
message RejectedPurchaseOrderCommandDetails {

    // A purchase order identifier.
    PurchaseOrderId purchase_order_id = 1;

    // Date of comman creation.
    google.protobuf.Timestamp when_created = 2;
}
