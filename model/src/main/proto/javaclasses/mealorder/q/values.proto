//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder.q";
option java_outer_classname = "ValuesProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";
import "spine/net/email_address.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";

// The single item of a menu list.
//
// This item contains the list of dishes for the
// specific vendor and date.
//
message MenuItem {

    // The vendor name.
    VendorName vendor_name = 1;

    // The collection of dishes.
    repeated DishItem dishes = 2;
}

// The single dish item of a menu.
//
// The dish category is used in UI to group dishes.
//
message DishItem {

    // The identifier of a dish.
    DishId id = 1;

    // The name of a dish.
    string name = 2;

    // The dish category.
    string category = 3;

    // The dish price.
    spine.money.Money price = 4;
}

// The item of the menu calendar.
//
// The item state indicates whether some active
// attached menus exist for this date.
//
message MenuCalendarItem {

    // A date in the menu calendar.
    spine.time.LocalDate date = 1;

    // Indicates presence of attached menus on a specified date.
    bool has_menu = 2;
}

// The item of an order list.
//
// This item contains the list of dishes.
//
// The item state indicates that this order is already processed
// (included in the purchase order) or not.
//
//      // If 'true' - an order can be canceled or its dish list can be
//      // modified.
//
//      // If 'false' - editing or canceling of such order is not possible.
//
message OrderItem {

    // The identifier of an order.
    OrderId id = 1;

    // The collection of ordered dishes.
    repeated DishItem dishes = 2;

    // Indicates an order is processed or not.
    bool is_processed = 3;
}

// The item of the vendor list.
//
message VendorItem {

    // The identifier of a vendor.
    VendorId id = 1;

    // The vendor name.
    VendorName vendor_name = 2;

    // The vendor email address.
    spine.net.EmailAddress email = 3;

    // Phone numbers of the vendor.
    repeated PhoneNumber phone_numbers = 4;

    // The daily purchase order creation deadline time.
    spine.time.LocalTime po_daily_deadline = 5;
}

// The item of the full menu list.
//
message FullMenuItem {

    // The identifier of a menu.
    MenuId menu_id = 1;

    // Date range when a menu is available.
    MenuDateRange menu_date_range = 2;

    // The collection of dishes.
    repeated DishItem dishes = 3;
}

// The item of the purchase order list.
//
// When a purchase order is automatically created at the
// vendors `poDailyDeadline` time the validation process is performed.
//
// If validation process has failed a purchase order status gets `INVALID` value.
// If the administrator decides to overrule failed validation and mark a
// purchase order as valid it is automatically
// sent to vendor.
//
// If validation process is completed successfully a purchase order is automatically
// sent to vendor.
//
// If sending process hasn't caused errors, a purchase order status
// gets `SENT` value.
//
// If errors occurred while sending a purchase order to the vendor
// its status gets `ERROR` value.
//
// When the administrator decides to cancel a purchase order
// in some reason its status gets `CANCELED` value.
//
// When the administrator receives ordered dishes and checks
// the accordance to a the purchase order dish list, he marks
// a purchase order as delivered. After this a purchase order
// status gets `DELIVERED` value.
//
message PurchaseOrderItem {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;
}

// A purchase order status values.
//
enum PurchaseOrderStatus {

    // Used as an undefined value marker.
    POS_UNDEFINED = 0;

    SENT = 1;

    ERROR = 2;

    INVALID = 3;

    DELIVERED = 4;

    CANCELED = 5;
}

// The item of an order list.
//
// Used in a purchase order details veiw grouped by User.
//
// This item contains the user identifier, the list of ordered dishes and
// the order validation status.
//
message UserOrderDetails {

    // The identifier of the user.
    UserId id = 1;

    // The collection of dishes.
    repeated DishItem dishes = 2;

    // An order validation status.
    bool is_valid = 3;
}

// The item of a monthly spendings report view.
//
// This item represents a user with its spendings amount.
//
message UserSpendings {

    // The identifier of a user.
    UserId id = 1;

    // Amount of spendings.
    spine.money.Money amount = 2;
}
