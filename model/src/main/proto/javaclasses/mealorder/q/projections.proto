//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "io.javaclasses.mealorder.q";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";
import "spine/net/email_address.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/q/values.proto";

// **** Projections for the UI role User. ****

// A projection state of the menu list for the specified date.
//
// This view includes the list of actual attached menus for the specified date.
// The date is specified by `MenuListId` value.
// The menu is attached if its date range includes the specified date.
// Collection of menus can be empty if there are no attached menus for this
// date or all of them are not actual.
//
// 'Actual menu' means that time of purchase order creation hasn't come for
// this date. This time is defined in menus vendor aggregate. See `Vendor`
// for more details.
//
// Subscribes following events:
// 1. `DateRangeForMenuSet`
// 2. `PurchaseOrderCreated`
// 3. `MenuImported`
//
message MenuListView {

    // An identifier of the menu list.
    MenuListId list_id = 1;

    // Collection of menus.
    repeated MenuItem menus = 2;
}

// A projection state of the menu calendar.
//
// This view includes the list of dates in range from
// today to the same day next week. (8 elements)
// The each date contains information about the menus availability for it.
//
// Subscribes following events:
// 1. `DateRangeForMenuSet`
//
message MenuCalendarView {

    // Collection of calendar items (dates).
    repeated MenuCalendarItem calendar_items = 1;
}

// A projection state of the order list.
//
// This view includes the list of user's orders for the
// specified date.
//
// The order date and user ID are specified by `OrderListId` value.
//
// Subscribes following events:
// 1. `DishAddedToOrder`
// 2. `DishRemovedFromOrder`
// 3. `OrderCanceled`
// 4. `OrderProcessed`
//
message OrderListView {

    // An identifier of the order list.
    OrderListId list_id = 1;

    // Collection of user's orders.
    repeated OrderItem orders = 2;
}

// **** Projections for UI role Admin. ****

// A projection state of the vendor list.
//
// Subscribes following events:
// 1. `VendorAdded`
// 2. `VendorUpdated`
//
message VendorListView {

    // Collection of all vendors.
    repeated VendorItem vendors = 1;
}

// A projection state of the full menu list.
//
// This view includes the list of all menus,
// sorted by menu date range.
//
// Subscribes following events:
// 1. `DateRangeForMenuSet`
// 2. `MenuImported`
//
message FullMenuListView {

    // Collection of menus.
    repeated FullMenuItem menus = 1;
}

// A projection state of the purchase order list.
//
// This view includes the list of all purchase orders,
// sorted by date.
//
// Subscribes following events:
// 1. `PurchaseOrderCreated`
// 2. `PurchaseOrderDelivered`
// 3. `PurchaseOrderSent`
// 4. `PurchaseOrderValidationFailed`
// 5. `PurchaseOrderValidationOverruled`
// 6. `PurchaseOrderValidationPassed`
// 7. `PurchaseOrderCanceled`
//
message PurchaseOrderListView {

    // Collection of purchase orders.
    repeated PurchaseOrderItem purchase_orders = 1;
}

// A projection state of the purchase order details view
// grouped by dish.
//
// Subscribes following events:
// 1. `PurchaseOrderCreated`
// 2. `PurchaseOrderDelivered`
// 3. `PurchaseOrderSent`
// 4. `PurchaseOrderValidationFailed`
// 5. `PurchaseOrderValidationOverruled`
// 6. `PurchaseOrderValidationPassed`
// 7. `PurchaseOrderCanceled`
//
message PurchaseOrderDetailsByDishView {

    // An identifier of the purchase order.
    PurchaseOrderId id = 1;

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // Collection of dishes.
    repeated DishItem dishes = 3;
}

// A projection state of the purchase order details view
// grouped by user.
//
// When the purchase order is created its validation may complete with failure.
// Those orders which caused that failure are marked as invalid.
//
// Subscribes following events:
// 1. `PurchaseOrderCreated`
// 2. `PurchaseOrderDelivered`
// 3. `PurchaseOrderSent`
// 4. `PurchaseOrderValidationFailed`
// 5. `PurchaseOrderValidationOverruled`
// 6. `PurchaseOrderValidationPassed`
// 7. `PurchaseOrderCanceled`
//
message PurchaseOrderDetailsByUserView {

    // An identifier of the purchase order.
    PurchaseOrderId id = 1;

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // Collection of orders.
    repeated UserOrderDetails orders = 3;
}

// A projection state of the monthly spendings report view.
//
// The report month is specified by `MonthlySpendingsReportId`.
//
// This view contains user's spendings for full month period
// if the report is formed for the passed month.
// It contains user's spendings for period from  month first
// date till today if the report is formed for the current month.
//
// Subscribes following events:
// 1. `PurchaseOrderDelivered`
// 2. `PurchaseOrderSent`
//
message MonthlySpendingsReportView {

    // An identifier of the monthly spendings report.
    MonthlySpendingsReportId report_id = 1;

    // Collection of user's spendings for the specified month.
    repeated UserSpendings user_spendinds = 2;
}
