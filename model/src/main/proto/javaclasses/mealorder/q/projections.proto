//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "io.javaclasses.mealorder.q.projection";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";
import "google/protobuf/timestamp.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";

// **** User interface projections ****

// A projection state of menu list for the specified date.
//
// This view includes list of actual attached menus for the specified date.
// Collection of menus can be empty if there are no attached menus for this
// date or all of them are not actual.
//
// 'Actual menu' means that `Vendor.poDailyDeadline` hasn't come for
// the date value.
//
message MenuListView {

    spine.time.LocalDate date = 1;

    repeated MenuItem menus = 2;
}

// Item of menu list view for user interface.
//
// This item contains list of dishes for the
// specific vendor and date.
//
message MenuItem {

    VendorId vendor_id = 1;

    spine.time.LocalDate date = 2;

    repeated DishItem dishes = 3;
}

// Item of menu.
//
// For this time represens the full copy of `Dish`.
//
message DishItem {

    DishId id = 1;

    string name = 2;

    string category = 3;

    spine.money.Money price = 4;
}

// A projection state of date selector bar.
//
// This view includes list of `DateSelectorItem` in range from
// current date to the next weeks same day. (8 elements)
//
message DateSelectorView {

    repeated DateSelectorItem selector_dates = 1;
}

// Item of date selector bar.
//
// Item state `enabled = true` indicates that some active
// attached menus exist for this date.
// Item state `selected = true` indicates that this
// date is selected on the user interface to show
// orders and menus.
//
message DateSelectorItem {

    spine.time.LocalDate date = 1;

    bool enabled = 2;

    bool selected = 3;
}

// A projection state of order bar in user interface.
//
// This view includes list of user orders for the
// specified date.
//
message OrderListView {

    spine.time.LocalDate order_date = 1;

    repeated OrderItem orders = 2;

}

// Item of user interface order view.
//
// This item contains list of dishes.
//
// Item state `isProcessed = true` indicates that this
// order is already processed and included in purchase order
// for this date and vendor. Editing or Canceling of this order
// is not provided.
//
// Item state `isProcessed = false` indicates that this
// order is not processed and not included in purchase order yet.
// Editing of dish list or Canceling order is provided.
//
message OrderItem {

    OrderId id = 1;

    repeated DishItem dishes = 2;

    bool is_processed = 3;
}

// **** Administrator interface projections ****

// A projection state of vendor list view in administrator interface.
//
message VendorListView {

    repeated VendorItem vendors = 1;
}

// Item of vendor list view.
//
// For this time represens the full copy of `Vendor` agregate state.
//
message VendorItem {

    VendorId id = 1;

    VendorDescription description = 2;
}

// A projection state of menu list for administrator interface.
//
// This view includes list of last 50 menus for management,
// sorted by menu date range.
//
message MenuListManagementView {

    repeated MenuListManagementItem menus = 1;
}

// Item of administrator menu list view.
//
message MenuListManagementItem {

    MenuId menu_id = 1;

    MenuDateRange menu_date_range = 2;

    repeated DishItem dishes = 3;
}

// A projection state of purchase order list for administrator interface.
//
// This view includes list of last 50 purchase orders for management,
// sortd by date.
//
message PurchaseOrderListView {

    repeated PurchaseOrderItem purchase_orders = 1;
}

// Item of administrator purchase order list view.
//
message PurchaseOrderItem {

    PurchaseOrderId id = 1;

    PurchaseOrderStatus purchase_order_status = 2;
}

// Purchase order status values.
//
enum PurchaseOrderStatus {

    INVALID = 0;

    SENT = 1;

    DELIVERED = 2;

    CANCELED = 3;
}

// A projection state of purchase order details view
// sorted by dishe for administrator interface.
//
message PurchaseOrderDetailsByDishView {

    PurchaseOrderItem purchase_order = 1;

    repeated DishItem dishes = 2;
}

// A projection state of purchase order details view
// sorted by order for administrator interface.
//
message PurchaseOrderDetailsByOrderView {

    PurchaseOrderItem purchase_order = 1;

    repeated OrderItemForPODetails orders = 2;
}

// Item of administrator purchase order detail 'by order' list view.
//
message OrderItemForPODetails {

    UserId id = 1;

    repeated DishItem dishes = 2;

    OrderValidationStatus status = 3;
}

// Order validation status values.
//
enum OrderValidationStatus {

    ORDER_VALID = 0;

    ORDER_INVALID = 1;
}

// A projection state of monthly spendings report view.
//
message MonthlySpendingsReportView {

    spine.time.LocalDate report_date = 1;

    repeated UserSpendings user_spendinds = 2;
}

// Item of monthly spendings report view.
//
// This item represents user with its monthly spendings amount.
//
message UserSpendings {

    UserId id = 1;

    spine.money.Money amount = 2;
}