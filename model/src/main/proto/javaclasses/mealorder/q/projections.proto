//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder.q.projection";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";
import "spine/net/email_address.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/q/values.proto";
import "javaclasses/mealorder/values.proto";

// **** Projections for the UI role User. ****

// The projection state of a menu list for the specified date.
//
// This view includes the list of actual attached menus for the specified date.
// The date is specified by `MenuListId` value.
// The menu is attached if its date range includes the specified date.
// The collection of menus can be empty if there are no attached menus for this
// date or all of them are not actual.
//
// 'Actual menu' means that time of purchase order creation hasn't come for
// this date. This time is defined in a menu vendor aggregate. See `Vendor`
// for more details.
//
//Singleton, because menu list is global.
//
message MenuListView {

    // The identifier of a menu list.
    MenuListId list_id = 1;

    // The collection of menus.
    repeated MenuItem menu = 2;
}

// The projection state of the menu calendar.
//
// This view includes the list of dates in range from
// today to the same day next week. (8 elements)
// The each date contains information about the menus availability for it.
//
// Singleton, because the calendar is global.
//
message MenuCalendarView {

    // The identifier of the calendar.
    MenuCalendarId menu_calendar_id = 1;

    // The collection of calendar items (dates).
    repeated MenuCalendarItem calendar_item = 2 [(required) = true];
}

// The projection state of an order list.
//
// This view includes the list of user's orders for the
// specified date.
//
// The order date and the user ID are specified by `OrderListId` value.
//

message OrderListView {

    // The identifier of an order list.
    OrderListId list_id = 1;

    // The collection of user's orders.
    repeated OrderItem order = 2;
}

// **** Projections for UI role Admin. ****

// The projection state of the full menu item.
//
// This view has menu with date range.
//
message FullMenuView {

    // // The identifier of a full menu.
    MenuId menu_id = 1;

    // The vendor name.
    VendorName vendor_name = 2 [(required) = true];

    // The collection of categories.
    repeated DishesByCategory dishesByCategory = 3;

    // A date range for a menu.
    MenuDateRange menu_date_range = 4 [(required) = true];
}

// The projection state of the vendor list.
//
// Singleton, because there is only one list of vendors.
//
message VendorListView {

    // The identifier of the vendor list singleton.
    VendorListId vendor_list_id = 1;

    // The collection of all vendors.
    repeated VendorItem vendor = 2;
}

// The projection state of the purchase order list.
//
// This view includes the list of all purchase orders,
// sorted by date.
//
message PurchaseOrderItemView {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2 [(required) = true];
}

// The projection state of a purchase order details view
// grouped by dish.
//
message PurchaseOrderDetailsByDishView {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // The collection of dishes.
    repeated DishItem dish = 3 [(required) = true];
}

// The projection state of a purchase order details view
// grouped by user.
//
// When a purchase order is created its validation may complete with failure.
// Those orders which caused that failure are marked as invalid.
//
message PurchaseOrderDetailsByUserView {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // The collection of orders.
    repeated UserOrderDetails order = 3 [(required) = true];
}

// The projection state of a monthly spendings report view.
//
// The report month is specified by `MonthlySpendingsReportId`.
//
// This view contains users spendings for full month period
// if a report is formed for the passed month.
// It contains users spendings for period from  month first
// date till today if a report is formed for the current month.
//
message MonthlySpendingsReportView {

    // The identifier of a monthly spendings report.
    MonthlySpendingsReportId report_id = 1;

    // The collection of users spendings for the specified month.
    repeated UserSpendings user_spending = 2;

    // List of orders.
    //
    // Created on `PurchaseOrderSent` and on `PurchaseOrderDelivered`
    // users spendings will be added to the users' monthly spendings.
    repeated UserOrderDetails order = 3;
}
