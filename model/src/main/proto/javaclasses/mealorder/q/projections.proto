//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.q;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder.q.projection";
option java_outer_classname = "ProjectionsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";
import "spine/net/email_address.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";

// **** Projections for the UI role User. ****

// A projection state of a menu list for the specified date.
//
// This view includes the list of actual attached menus for the specified date.
// The date is specified by `MenuListId` value.
// The menu is attached if its date range includes the specified date.
// Collection of menus can be empty if there are no attached menus for this
// date or all of them are not actual.
//
// 'Actual menu' means that time of purchase order creation hasn't come for
// this date. This time is defined in menus vendor aggregate. See `Vendor`
// for more details.
//
message MenuListView {

    // An identifier of a menu list.
    MenuListId list_id = 1;

    // Collection of menus.
    repeated MenuItem menus = 2;
}

// A single item of the menu list.
//
// This item contains the list of dishes for the
// specific vendor and date.
//
message MenuItem {

    // A vendor name.
    VendorName vendor_name = 1;

    // Collection of dishes.
    repeated DishItem dishes = 2;
}

// A single dish item of the menu.
//
// This item contains dish identifier, name, price and category.
// The dish category is used in UI to group dishes.
//
message DishItem {

    // An identifier of the dish.
    DishId id = 1;

    // A name of the dish.
    string name = 2;

    // A dish category.
    string category = 3;

    // A dish price.
    spine.money.Money price = 4;
}

// A projection state of the menu calendar.
//
// This view includes the list of dates in range from
// today to the same day next week. (8 elements)
// The each date contains information about the menus availability for it.
//
message MenuCalendarView {

    // Collection of calendar items (dates).
    repeated MenuCalendarItem calendar_items = 1;
}

// An item of the menu calendar.
//
// An item state indicates whether some active
// attached menus exist for this date.
//
message MenuCalendarItem {

    // A date in menu calendar.
    spine.time.LocalDate date = 1;

    // Indicates presence of attached menus on specified date.
    bool has_menu = 2;
}

// A projection state of an order list.
//
// This view includes the list of user's orders for the
// specified date.
//
// The order date and user ID are specified by `OrderListId` value.
//
message OrderListView {

    // An identifier of the order list.
    OrderListId list_id = 1;

    // Collection of user orders.
    repeated OrderItem orders = 2;
}

// An item of the order list.
//
// This item contains list of dishes.
//
// The item state indicates that this order is already processed
// (included in the purchase order for this date and vendor) or not.
//
//      // If 'true' - order can be canceled or its dish list can be
//      // modified.
//
//      // If 'false' - editing or canceling of such order is not possible.
//
message OrderItem {

    // An identifier of the order.
    OrderId id = 1;

    // Collection of the ordered dishes.
    repeated DishItem dishes = 2;

    // Indicates order is processed or not.
    bool is_processed = 3;
}

// **** Projections for UI role Admin. ****

// A projection state of a vendor list.
//
message VendorListView {

    // Collection of all vendors.
    repeated VendorItem vendors = 1;
}

// An item of the vendor list.
//
message VendorItem {

    // An identifier of the vendor.
    VendorId id = 1;

    // A vendor name.
    VendorName vendor_name = 2;

    // A vendor email address.
    spine.net.EmailAddress email = 3;

    // Phone numbers of the vendor.
    repeated PhoneNumber phone_numbers = 4;

    // A daily purchase order creation deadline.
    spine.time.LocalTime po_daily_deadline = 5;
}

// A projection state of the full menu list.
//
// This view includes the list of all menus,
// sorted by menu date range.
//
message FullMenuListView {

    // Collection of menus.
    repeated FullMenuItem menus = 1;
}

// An item of the full menu list.
//
message FullMenuItem {

    // An identifier of the menu.
    MenuId menu_id = 1;

    // A date range when this menu is available.
    MenuDateRange menu_date_range = 2;

    // Collection of dishes.
    repeated DishItem dishes = 3;
}

// A projection state of the purchase order list.
//
// This view includes the list of all purchase orders,
// sorted by date.
//
message PurchaseOrderListView {

    // Collection of purchase orders.
    repeated PurchaseOrderItem purchase_orders = 1;
}

// An item of the purchase order list.
//
// When the purchase order is automatically created at the
// vendors `poDailyDeadline` time the validation process is performed.
//
// If validation process has failed the purchase order status gets `INVALID` value.
// If administrator decides to overrule failed validation and mark the
// purchase order as valid it is automatically
// sent to vendor.
//
// If validation process is completed successfully the purchase order is automatically
// sent to vendor.
//
// If sending process hasn't caused errors, the purchase order status
// gets `SENT` value.
//
// If errors occurred while sending the purchase order to vendor
// its status gets `ERROR` value.
//
// When administrator decides to cancel the purchase order
// in some reason its status gets `CANCELED` value.
//
// When administrator receives ordered dishes and checks
// the accordance to the purchase order dish list, he should
// mark the purchase order as delivered. After this purchase order
// status gets `DELIVERED` value.
//
message PurchaseOrderItem {

    // An identifier of the purchase order.
    PurchaseOrderId id = 1;

    // A purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;
}

// A purchase order status values.
//
enum PurchaseOrderStatus {

    // Used as an undefined value marker.
    POS_UNDEFINED = 0;

    SENT = 1;

    ERROR = 2;

    INVALID = 3;

    DELIVERED = 4;

    CANCELED = 5;
}

// A projection state of the purchase order details view
// grouped by dish.
//
message PurchaseOrderDetailsByDishView {

    // An identifier of the purchase order.
    PurchaseOrderId id = 1;

    // A purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // Collection of dishes.
    repeated DishItem dishes = 3;
}

// A projection state of the purchase order details view
// grouped by user.
//
// When the purchase order is created its validation may complete with failure.
// Those orders which caused that failure are marked as invalid.
//
message PurchaseOrderDetailsByUserView {

    // An identifier of the purchase order.
    PurchaseOrderId id = 1;

    // A purchase order status.
    PurchaseOrderStatus purchase_order_status = 2;

    // Collection of orders.
    repeated UserOrderDetails orders = 3;
}

// An item of the order list.
//
// Used in the purchase order details veiw grouped by User.
//
// This item contains user identifier, list of ordered dishes and
// order validation status.
//
message UserOrderDetails {

    // An identifier of user.
    UserId id = 1;

    // Collection of dishes.
    repeated DishItem dishes = 2;

    // An order validation status.
    bool is_valid = 3;
}

// A projection state of the monthly spendings report view.
//
// The report month is specified by `MonthlySpendingsReportId`.
//
// This view contains user spendings for full month period
// if the report is formed for the passed month.
// It contains user spendings for period from  month first
// date till today if the report is formed for the current month.
//
message MonthlySpendingsReportView {

    // An identifier of the monthly spendings report.
    MonthlySpendingsReportId report_id = 1;

    // Collection of user spendings for the specified month.
    repeated UserSpendings user_spendinds = 2;
}

// An item of the monthly spendings report view.
//
// This item represents the user with its spendings amount.
//
message UserSpendings {

    // An identifier of the user.
    UserId id = 1;

    // Amount of spendings.
    spine.money.Money amount = 2;
}
