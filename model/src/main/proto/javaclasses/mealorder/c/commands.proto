//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder.c.command";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;


import "spine/net/email_address.proto";
import "spine/time/time.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";
import "javaclasses/mealorder/model.proto";

// Adds a new vendor.
//
// May be rejected if the vendor with the same name already exists.
//
message AddVendor {

    // The identifier of a vendor which should be added.
    VendorId vendor_id = 1;

    // The identifier of the user who adds a vendor.
    UserId user_id = 2;

    // The name of a vendor.
    VendorName vendor_name = 3;

    // The email adress of a vendor to send a purchase order.
    spine.net.EmailAddress email = 4;

    // Phone numbers of a vendor.
    repeated PhoneNumber phone_numbers = 5;

    // Time when orders for this vendor are closed for editing.
    // Purchase orders for a vendor will be created exactly at this time.
    spine.time.LocalTime po_daily_deadline = 6;
}

// Updates a vendor profile.
//
message UpdateVendor {

    // The identifier of a vendor.
    VendorId vendor_id = 1;

    // The identifier of the user who updates vendor profile.
    UserId user_id = 2;

    // Changes in a vendor profile.
    VendorChange vendor_change = 3;
}

// Imports a menu.
//
message ImportMenu {

    // The identifier of a vendor.
    VendorId vendor_id = 1;

    // The identifier of a imported menu
    MenuId menuId = 2;

    // The identifier of the user who imports a menu.
    UserId user_id = 3;

    // The collection of dishes.
    repeated Dish dishes = 4;
}

// Sets a menu date range.
//
message SetDateRangeForMenu {

    // The identifier of a vendor.
    VendorId vendor_id = 1;

    // The identifier of a menu.
    MenuId menu_id = 2;

    // The identifier of the user who sets a menu date range.
    UserId user_id = 3;

    // A menu date range that should be set.
    MenuDateRange menu_date_range = 4;
}

// Creates a new order.
//
// A newly created order doesn's coitain dishes. Dishes may be added after creation.
//
message CreateOrder {

    // The identifier of an order.
    OrderId order_id = 1;

    // The identifier of the menu. Dishes from only this menu can be added to an order.
    MenuId menu_id = 2;
}

// Adds a dish to an order.
//
// Cannot be applied to canceled orders.
// Cannot be applied to processed orders.
//
message AddDishToOrder {

    // The identifier of an order.
    OrderId order_id = 1;

    // A dish that should be added to an order.
    Dish dish = 2;
}

// Removes a dish from an order.
//
// Cannot be applied to canceled orders.
// Cannot be applied to processed orders.
//
message RemoveDishFromOrder {

    // The identifier of an order.
    OrderId order_id = 1;

    // The identifier of a dish that should be removed from an order.
    DishId dish_id = 2;
}

// Cancels an order.
//
// Can be applied by owner manually.
// Can be applied by system when purchase order is creating if the order is empty.
//
// Cannot be applied to processed orders.
//
message CancelOrder {

    // The identifier of an order.
    OrderId order_id = 1;

    // The identifier of the user who cancels an order.
    UserId who_cancels = 2;
}

// Creates a purchase order.
//
message CreatePurchaseOrder {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The collection of all orders for this day for the specified vendor.
    repeated Order orders = 2;

    // The identifier of the user who creates a purchase order.
    UserId who_creates = 3;

    // The email adress of a vendor to send a purchase order.
    spine.net.EmailAddress vendor_email = 4;
}

// Marks a purchase order as delivered.
//
// Applicable only to sent purchase orders.
//
message MarkPurchaseOrderAsDelivered {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The identifier of the user who marks a purchase order as delivered.
    UserId who_marks_as_delivered = 2;
}

// Overrules a purchase order validation.
//
// Applicable only to invalid purchase orders.
//
message MarkPurchaseOrderAsValid {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The identifier of the user who marks a purchase order as valid.
    UserId user_id = 2;

    // The reason why a purchase order should be marked as valid.
    string reason = 3;

    // The email adress of a vendor to send a purchase order.
    spine.net.EmailAddress vendor_email = 4;
}

// Cancel a purchase order.
//
// Cannot be applied to delivered orders.
//
message CancelPurchaseOrder {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1;

    // The reason of cancelation.
    oneof reason {

        // The validation has failed and the admin didn't overrule it.
        bool invalid = 2;

        // Manual cancellation of a purchase order.
        string custom_reason = 3;
    }

    // The identifier of the user who cancels a purchase order.
    UserId user_id = 4;
}
