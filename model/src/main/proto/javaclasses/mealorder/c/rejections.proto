//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "io.javaclasses.mealorder.c.rejection";
option java_multiple_files = false;
option java_generate_equals_and_hash = true;


import "google/protobuf/timestamp.proto";
import "spine/change/value_mismatch.proto";
import "spine/time/time.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";

// The rejection to add vendor.
//
// It is thrown if a vendor with the same name already exists.
//
message VendorAlreadyExists {

    // An identifier of the existing vendor.
    VendorId vendor_id = 1;

    // A name of the existing vendor.
    VendorName vendor_name = 2;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 3;
}

// The rejection to set date range for a menu.
//
// It is thrown if the menu for this period already exists or its range includes dates from the past.
//
message CannotSetDateRange {

    // An identifier of the vendor of this menu.
    VendorId vendor_id = 1;

    // An identifier of the menu which date range isn't set.
    MenuId menu_id = 2;

    // A date range that was been attempted to set.
    MenuDateRange menu_date_range = 3;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 4;
}

// The rejection to create an order.
//
// It is thrown if the order for this user on the same date and for the same vendor already exists.
//
message OrderAlreadyExists {

    // An identifier of the existing order.
    OrderId order_id = 1;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 2;
}

// The rejection to create an order.
//
// It is thrown if there is no menu on the order date.
//
message MenuNotAvailable {

    // An identifier of the user who couldn't create an order.
    UserId user_id = 1;

    // An identifier of the vendor from who the user tried to order.
    VendorId vendor_id = 2;

    // A date on which the user attempted to create a menu.
    spine.time.LocalDate order_date = 3;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 4;

}

// The rejection to add dish to order.
//
// It is thrown if a dish and order vendors does not match.
//
message DishVendorMismatch {

    // An identifier of the order in which the user tried to add the dish.
    OrderId order_id = 1;

    // An identifier of the dish which the user tried to add to the order.
    DishId dish_id = 2;

    // An identifier of the user who tried to add the dish.
    UserId user_id = 3;

    // A mismatching vendor value.
    spine.change.ValueMismatch vendor_mismatch = 4;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 5;
}

// The rejection to remove dish from an order.
//
// It is thrown if an order does not contain such a dish.
//
message CannotRemoveMissingDish {

    // An identifier of the order from which the user tried to remove the dish.
    OrderId order_id = 1;

    // An identifier of the user who tried to remove the dish.
    UserId user_id = 2;

    // An identifier of the dish which user tried to remove from the order.
    DishId dish_id = 3;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 4;
}

// The rejection to cancel an order.
//
// It is thrown if an order is already processed.
//
message CannotCancelProcessedOrder {

    // An identifier of the order which user tried to cancel.
    OrderId order_id = 1;

    // An identifier of the user who tried to cancel the order.
    UserId user_id = 2;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 3;
}

// The rejection to create purchase order.
//
// It is thrown if there are no orders for this vendor for this date.
//
message CannotCreatePurchaseOrder {

    // An identifier of the vendor for which a purchase order wasn't created.
    VendorId vendor_id = 1;

    // A date on which the purchase order creation was rejected.
    spine.time.LocalDate purchase_order_date = 2;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 3;
}

// The rejection to mark a purchase order as delivered.
//
// It is thrown if a purchase order was canceled.
//
message CannotMarkCanceledPurchaseOrderAsDelivered {

    // An identifier of the purchase order which user tried to mark as delivered.
    PurchaseOrderId po_id = 1;

    // An identifier of the user who tried to mark the purchase ordser as delivered.
    UserId user_id = 2;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 3;
}

// The rejection to cancel purchase order.
//
// It is thrown if a purchase order was delivered.
//
message CannotCancelDeliveredPurchaseOrder {

    // An identifier of the purchase order which user tried to cancel.
    PurchaseOrderId po_id = 1;

    // An identifier of the user who tried to cancel the purchase order.
    UserId user_id = 2;

    // A moment of time when it was rejected.
    google.protobuf.Timestamp when_rejected = 3;
}
