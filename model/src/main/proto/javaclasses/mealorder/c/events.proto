//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder.c.event";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/net/email_address.proto";
import "spine/time/time.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/model.proto";
import "javaclasses/mealorder/values.proto";

// The event reflecting a vendor addition.
//
message VendorAdded {

    // The identifier of a added vendor.
    VendorId vendor_id = 1 [(required) = true];

    // The identifier of the user who added a vendor.
    UserId who_added = 2 [(required) = true];

    // Was added at this time.
    google.protobuf.Timestamp when_added = 3 [(required) = true];

    // The name of a vendor.
    VendorName vendor_name = 4 [(required) = true];

    // The email adress to send a purchase order.
    spine.net.EmailAddress email = 5 [(required) = true];

    // Phone numbers of a vendor.
    repeated PhoneNumber phone_number = 6 [(required) = true];

    // Time to which all orders to this vendor must be made.
    spine.time.LocalTime po_daily_deadline = 7 [(required) = true];
}

// The event fired upon a vendor profile update.
//
message VendorUpdated {

    // The identifier of an updated vendor.
    VendorId vendor_id = 1 [(required) = true];

    // The identifier of the user who updated a vendor profile.
    UserId who_uploaded = 2 [(required) = true];

    // Was updated at this time.
    google.protobuf.Timestamp when_updated = 3 [(required) = true];

    // Changes in a vendor profile.
    VendorChange vendor_change = 4 [(required) = true];
}

// The event signalizing about the successful import of a menu.
//
// A menu is imported from an external source and is parsed as a list of dishes.
// After that a menu is assigned to the vendor.
//
message MenuImported {

    // The identifier of the vendor that provided a menu.
    VendorId vendor_id = 1 [(required) = true];

    // The identifier of an imported menu.
    MenuId menu_id = 2 [(required) = true];

    // The identifier of the user who imported a menu.
    UserId who_imported = 3 [(required) = true];

    // Was imported at this time.
    google.protobuf.Timestamp when_imported = 4 [(required) = true];

    // The collection of menu dishes.
    repeated Dish dish = 5 [(required) = true];
}

// The event reflecting a menu active date range set.
//
message DateRangeForMenuSet {

    // The identifier of a vendor.
    VendorId vendor_id = 1 [(required) = true];

    // The identifier of a menu.
    MenuId menu_id = 2 [(required) = true];

    // The identifier of the user who set date range.
    UserId who_set = 3 [(required) = true];

    // Was set at this time.
    google.protobuf.Timestamp when_set = 4 [(required) = true];

    // Date range that has been set.
    MenuDateRange menu_date_range = 5 [(required) = true];
}

// The event signalizing about the successful creation of an order.
//
// A newly created order is always empty.
//
message OrderCreated {

    // The identifier of an order.
    OrderId order_id = 1 [(required) = true];

    // The identifier of the menu which contains dishes that can be added to an order.
    MenuId menu_id = 2 [(required) = true];

    // Was created at this time.
    google.protobuf.Timestamp when_created = 3 [(required) = true];
}

// The event signalizing about a dish addition to the order.
//
message DishAddedToOrder {

    // The identifier of the order.
    OrderId order_id = 1 [(required) = true];

    // A dish that added to an order.
    Dish dish = 2 [(required) = true];

    // Was added at this time.
    google.protobuf.Timestamp when_added = 3 [(required) = true];
}

// The event signalizing about the successful removing of a dish from the order.
//
message DishRemovedFromOrder {

    // The identifier of the order.
    OrderId order_id = 1 [(required) = true];

    // A dish removed from an order.
    Dish dish = 2 [(required) = true];

    // Was removed at this time.
    google.protobuf.Timestamp when_removed = 3 [(required) = true];
}

// The event signalizing about the successful order cancellation.
//
message OrderCanceled {

    // The identifier of an order.
    OrderId order_id = 1 [(required) = true];

    // The identifier of the user who canceled an order.
    UserId who_canceled = 2 [(required) = true];

    // Was canceled at this time.
    google.protobuf.Timestamp when_canceled = 3 [(required) = true];
}

// The event signalizing about the successful addition of an order to the purchase order.
//
message OrderProcessed {

    // An order that was added to the purchase order.
    Order order = 1 [(required) = true];

    // Was added to the purchase order at this time.
    google.protobuf.Timestamp when_processed = 2 [(required) = true];
}

// The event signalizing about the successful creation of a purchase order.
//
message PurchaseOrderCreated {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // Was created at this time.
    google.protobuf.Timestamp when_created = 2 [(required) = true];

    // The identifier of the user who created a purchase order.
    UserId who_created = 3 [(required) = true];

    // The collection of all orders for this day.
    repeated Order order = 4 [(required) = true];
}

// The event signalizing about the successful delivering of a purchase order.
//
message PurchaseOrderDelivered {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The identifier of the user who marked a purchase order as delivered.
    UserId who_marked_as_delivered = 2 [(required) = true];

    // Was delivered at this time.
    google.protobuf.Timestamp when_delivered = 3 [(required) = true];
}

// The event signalizing about the successful sending of a purchase order.
//
message PurchaseOrderSent {

    // Purchase order.
    PurchaseOrder purchase_order = 1 [(required) = true];

    // Was sent at this time.
    google.protobuf.Timestamp when_sent = 2 [(required) = true];

    // The email address of the sender.
    spine.net.EmailAddress sender_email = 3 [(required) = true];

    // The email address of the recipient.
    spine.net.EmailAddress vendor_email = 4 [(required) = true];
}

// The event signalizing about failed purchase order validation.
//
// Purchase order validation may complete with failure if some orders contain
// a large number of same dishes.
//
// That may indicate the user's mistake.
// Such orders are attached to this event.
//
message PurchaseOrderValidationFailed {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The collection of orders that caused a failure of validation.
    repeated Order failure_order = 2 [(required) = true];

    // Validation failed at this time.
    google.protobuf.Timestamp when_failed = 3 [(required) = true];
}

// The event signalizing that purchase order validation is overruled successfully.
//
message PurchaseOrderValidationOverruled {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The identifier of the user who overruled validation.
    UserId who_overruled = 2 [(required) = true];

    // The reason why validation is overruled.
    string reason = 3 [(required) = true];

    // Validation was overruled at this time.
    google.protobuf.Timestamp when_overruled = 4;
}

// The event signalizing that purchase order validation is completed successfully.
//
message PurchaseOrderValidationPassed {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // Validation completed successfully at this time.
    google.protobuf.Timestamp when_passed = 2 [(required) = true];
}

// The event signalizing about the successful order cancellation.
//
message PurchaseOrderCanceled {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The identifier of the user who cancelled a purchase order.
    UserId user_id = 2 [(required) = true];

    // Was canceled at this time.
    google.protobuf.Timestamp when_canceled = 3 [(required) = true];

    // The reason of cancellation.
    //
    // invalid - order validation failed
    // custom_reason - otherwise
    //
    oneof Reason {
        bool invalid = 4;
        string custom_reason = 5;
    }

    // The collection of orders to cancel.
    repeated Order order = 6;
}
