//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder.c;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "io.javaclasses.mealorder.c";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/net/email_address.proto";
import "spine/time/time.proto";
import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/model.proto";
import "javaclasses/mealorder/values.proto";

// An event reflecting the vendor addition.
//
message VendorAdded {

    // An identifier of the added vendor.
    VendorId vendor_id = 1;

    // An identifier of the user, who added vendor.
    UserId who_added = 2;

    // Time of addition.
    google.protobuf.Timestamp when_added = 3;

    // An email adress  to send an purchase order.
    spine.net.EmailAddress email = 4;

    // A phone numbers of the vendor.
    repeated PhoneNumber phone_numbers = 5;

    // A daily deadline.
    spine.time.LocalTime po_daily_deadline = 6;
}

// An event fired upon the vendor description update.
//
message VendorUpdated {

    // An identifier of the updated vendor.
    VendorId vendor_id = 1;

    // An identifier of the user, who updated vendor.
    UserId who_uploaded = 2;

    // Time of update.
    google.protobuf.Timestamp when_updated = 3;

    // Changes in vendor fields.
    VendorChange vendor_change = 4;
}

// An event signalizing about the successful import of the menu.
//
// A menu is imported from an external source and is parsed as a list of dishes.
// After that the menu is assignet to a vendor.
//
message MenuImported {

    // An identifier of a vendor that provided a menu.
    VendorId vendor_id = 1;

    // An identifier of imported menu, contains vendor ID.
    MenuId menu_id = 2;

    // An identifier of the user, who imported menu.
    UserId who_imported = 3;

    // Menu import time.
    google.protobuf.Timestamp when_imported = 4;

    // Collection of menu dishes.
    repeated Dish dishes = 5;
}

// An event reflecting the menu active date range set.
//
message DateRangeForMenuSet {

    // An identifier of the menu.
    MenuId menu_id = 1;

    // An identifier of the user, who set menu date range.
    UserId who_set = 2;

    // Menu date range setting time.
    google.protobuf.Timestamp when_set = 3;

    // Menu date range that has been set.
    MenuDateRange menu_date_range = 4;
}

// An event signalizing about the successful creation of an order.
//
// A newly created order is always empty.
//
message OrderCreated {

    // An identifier of the created order.
    OrderId order_id = 1;

    // An identifier of the menu which contains dishes can be added to order.
    MenuId menu_id = 2;

    // Time of the order creation.
    google.protobuf.Timestamp when_created = 3;
}

// An event signalizing about addition the dish to the order.
//
message DishAddedToOrder {

    // An identifier of the order.
    OrderId order_id = 1;

    // An identifier of the dish.
    DishId dish_id = 2;
}

// An event signalizing about successful removing the dish from the order.
//
message DishRemovedFromOrder {

    // An identifier of the order.
    OrderId order_id = 1;

    // An identifier of the dish.
    DishId dish_id = 2;
}

// An event signalizing about the order cancellation.
//
message OrderCanceled {

    // An identifier of the order.
    OrderId order_id = 1;

    // A user identifier who canceled the order.
    UserId who_canceled = 2;

    // Time of the order cancellation.
    google.protobuf.Timestamp when_canceled = 3;
}

// An event signalizing about the order is added to purchase order.
//
message OrderProcessed {

    // The order that was added to purchase order.
    Order order = 1;

    // Time of the order addition to purchase order.
    google.protobuf.Timestamp when_processed = 2;
}

// An event signalizing about the successful creation of a purchase order.
//
message PurchaseOrderCreated {

    // A Purchase order identifier.
    PurchaseOrderId id = 1;

    // Time of creation.
    google.protobuf.Timestamp when_created = 2;

    // Collection of all orders for this day.
    repeated Order orders = 3;
}

// An event signalizing about the successful order delivering.
//
message PurchaseOrderDelivered {

    // A Purchase order identifier.
    PurchaseOrderId id = 1;

    // Identifier of a user who marked purchase order as delivered.
    UserId who_marked_as_delivered = 3;

    // Delivery time.
    google.protobuf.Timestamp when_delievered = 2;
}

// An event signalizing about the successful purchase order sending.
//
message PurchaseOrderSent {

    // A Purchase order identifier.
    PurchaseOrder purchase_order = 1;

    // Sending time.
    google.protobuf.Timestamp when_sent = 2;

    // An E-mail address of the sender.
    spine.net.EmailAddress sender_email = 3;

    // An E-mail address of the recipient.
    spine.net.EmailAddress vendor_email = 4;
}

// An event signalizing about the failed purchase order validation.
//
message PurchaseOrderValidationFailed {

    // A purchase order identifier.
    PurchaseOrderId id = 1;

    // Collection of orders that caused the failure of validation.
    repeated Order failure_orders = 2;

    // Validation failed time.
    google.protobuf.Timestamp when_failed = 3;
}

// An event signalizing about the successful purchase order validation overruled.
//
message PurchaseOrderValidationOverruled {

    // A purchase order identifier.
    PurchaseOrderId id = 1;

    // A user identifiers that overruled the validation.
    UserId who_overruled = 2;

    // The reason why validation is overruled.
    string reason = 3;
}

// An event signalizing about the successful purchase order validation.
//
message PurchaseOrderValidationPassed {

    // A purchase order identifier.
    PurchaseOrderId id = 1;

    // Time of successful validation.
    google.protobuf.Timestamp when_passed = 2;
}

// An event signalizing about the successful order cancellation.
//
message PurchaseOrderCanceled {

    // A purchase order identifier.
    PurchaseOrderId id = 1;

    // A user identifiers that canceled the purchase order.
    UserId user_id = 2;

    // Cancellation time.
    google.protobuf.Timestamp when_canceled = 3;

    // Reason for cancellation.
    //
    // invalid - order validation failed
    // custom_reason - otherwise
    //
    oneof Reason {
        bool invalid = 4;
        string custom_reason = 5;
    }
}
