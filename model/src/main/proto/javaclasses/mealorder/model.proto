//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package javaclasses.mealorder;

import "spine/options.proto";

option (type_url_prefix) = "type.javaclasses.mealorder";
option java_package = "javaclasses.mealorder";
option java_outer_classname = "ModelProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "javaclasses/mealorder/identifiers.proto";
import "javaclasses/mealorder/values.proto";
import "spine/money/money.proto";
import "spine/time/time.proto";
import "spine/net/email_address.proto";

// The model of a dish.
//
// Dish is an item of the menu, represented by the name of a dish, its price and categoty.
//
message Dish {

    // The identifier of a dish.
    DishId id = 1 [(required) = true];

    // The name of a dish.
    string name = 2 [(required) = true];

    // A dish category.
    string category = 3 [(required) = true];

    // A dish price.
    spine.money.Money price = 4 [(required) = true];
}

// The model of a menu.
//
// Menu is represented by the collection of dishes and the date range when available.
//
message Menu {

    // The identifier of a menu.
    MenuId id = 1 [(required) = true];

    // The date range when available.
    MenuDateRange menu_date_range = 2 [(required) = true];

    // The collection of dishes.
    repeated Dish dish = 3;
}

// The model representing the `Order` aggregate.
//
// The value of an order status is set to `ORDER_ACTIVE` when
// created. In this state dishes can be added or removed from the order.
//
// When the order is included into purchase order
// its status is set to `ORDER_PROCESSED`.
//
// When the order is canceled by the user or the purchase order
// was canceled its status is set to `ORDER_CANCELED`. Order can
// be canceled by the system when its dish list is empty and the
// purchase order creation deadline has come.
//
message Order {

    // The identifier of an order.
    OrderId id = 1 [(required) = true];

    // The collection of dishes.
    repeated Dish dish = 2;

    // The status of an order.
    OrderStatus status = 3;
}

// The model representing the `PurchaseOrder` aggregate.
//
// When a purchase order is automatically created at the
// vendor `poDailyDeadline` time its status gets `CREATED` value.
// Then the validation process is performed.
//
// If the validation process has failed a purchase order status gets `INVALID` value.
// If the administrator decides to overrule failed validation and mark a
// purchase order as valid its status gets `VALID` value and it is automatically
// sent to vendor.
//
// If validation process is completed successfully a purchase order  status gets `VALID`
// value and it is automatically sent to vendor.
//
// If sending process hasn't caused errors, a purchase order status
// gets `SENT` value.
//
// If errors occurred while sending a purchase order to the vendor
// its status gets `ERROR` value.
//
// When the administrator decides to cancel a purchase order
// in some reason its status gets `CANCELED` value.
//
// When the administrator receives ordered dishes and checks
// the accordance to a the purchase order dish list, he marks
// a purchase order as delivered. After this a purchase order
// status gets `DELIVERED` value.
//
message PurchaseOrder {

    // The identifier of a purchase order.
    PurchaseOrderId id = 1 [(required) = true];

    // The collection of orders.
    repeated Order order = 2;

    // The status of a purchase order.
    PurchaseOrderStatus status = 3;
}

// The model representing the `Vendor` aggregate.
//
message Vendor {

    // The identifier of a vendor.
    VendorId id = 1 [(required) = true];

    // The name of a vendor
    VendorName vendor_name = 2 [(required) = true];

    // The email address to send a purchase order.
    spine.net.EmailAddress email = 3 [(required) = true];

    // The phone numbers of a vendor.
    repeated PhoneNumber phone_number = 4;

    // Daily deadline time.
    //
    // Time when orders for this vendor are closed for editing.
    // The purchase order for the specified vendor will be created exactly at this time.
    spine.time.LocalTime po_daily_deadline = 5 [(required) = true];

    // The collection of menus.
    repeated Menu menu = 6;
}
